// Configure the database
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Admin {
  id             String           @id @default(uuid())
  username       String?
  password       String?
  loginId        String?          @unique
  salary         String?
  userType       UserType
  adminJwt       AdminJwt?
  salaryAdvanced SalaryAdvanced[]

  @@map("admin")
}

model AdminJwt {
  id                     String    @id @default(uuid())
  adminId                String    @unique
  accessToken            String?   @db.VarChar(255)
  refreshToken           String?   @db.VarChar(255)
  accessTokenExpiryDate  DateTime?
  refreshTokenExpiryDate DateTime?
  admin                  Admin     @relation(fields: [adminId], references: [id])

  @@map("admin_jwt")
}

model Purchase {
  id               String            @id @default(uuid())
  purchaseName     String
  supplierId       String?
  supplierLorryId  String?
  purchaseStatus   PurchaseStatus
  purchaseDate     DateTime?
  purchaseInvoices PurchaseInvoice[]
  purchaseInfos    PurchaseInfo[]
  supplier         Supplier?         @relation(fields: [supplierId], references: [id])
  supplierLorry    SupplierLorry?    @relation(fields: [supplierLorryId], references: [id])

  @@map("purchase")
}

model PurchaseInvoice {
  id         String    @id @default(uuid())
  image      Bytes?
  purchaseId String?
  purchase   Purchase? @relation(fields: [purchaseId], references: [id])

  @@map("purchase_invoice")
}

model PurchaseInfo {
  id                 String         @id @default(uuid())
  pricePerKg         String?
  kgPurchased        String?
  totalPurchasePrice Float?
  durianVarietyId    String?
  purchaseId         String?
  purchase           Purchase?      @relation(fields: [purchaseId], references: [id])
  bucket             Bucket[]
  durianVariety      DurianVariety? @relation(fields: [durianVarietyId], references: [id])

  @@map("purchase_info")
}

model Supplier {
  id              String          @id @default(uuid())
  companyName     String
  contact         String
  supplierLorries SupplierLorry[]
  purchase        Purchase[]

  @@map("supplier")
}

model SupplierLorry {
  id               String     @id @default(uuid())
  lorryPlateNumber String
  supplierId       String
  supplier         Supplier?  @relation(fields: [supplierId], references: [id])
  purchase         Purchase[]

  @@map("supplier_lorry")
}

model Sales {
  id            String         @id @default(uuid())
  companyName   String?
  salesStatus   SalesStatus
  salesDate     DateTime?
  salesInvoices SalesInvoice[]
  salesInfos    SalesInfo[]

  @@map("sales")
}

model SalesInvoice {
  id      String  @id @default(uuid())
  image   Bytes?
  salesId String?
  sales   Sales?  @relation(fields: [salesId], references: [id])

  @@map("sales_invoice")
}

model SalesInfo {
  id              String         @id @default(uuid())
  pricePerKg      String?
  kgSales         String?
  totalSalesValue Float?
  durianVarietyId String?
  salesId         String?
  sales           Sales?         @relation(fields: [salesId], references: [id])
  durianVariety   DurianVariety? @relation(fields: [durianVarietyId], references: [id])
  bucket          Bucket[]

  @@map("sales_info")
}

model DurianVariety {
  id            String         @id @default(uuid())
  durianCode    String         @unique
  stockQuantity Int
  salesInfo     SalesInfo[]
  purchaseInfo  PurchaseInfo[]
}

model SalaryAdvanced {
  id                   String   @id @default(uuid())
  adminId              String
  salaryAdvancedAmount Float
  outstandingAmount    Float
  requestDate          DateTime

  admin Admin @relation(fields: [adminId], references: [id])

  @@map("salary_advanced")
}

model Bucket {
  id             String        @id @default(uuid())
  kg             Float
  kgSales        Float
  salesInfoId    String?
  purchaseInfoId String?
  salesInfo      SalesInfo?    @relation(fields: [salesInfoId], references: [id])
  purchaseInfo   PurchaseInfo? @relation(fields: [purchaseInfoId], references: [id])
}

model Expenses {
  id             String       @id @default(uuid())
  expensesType   ExpensesType
  expensesAmount Float
  remark         String
  date           DateTime
}

// Define enums for user types and purchase/sales statuses
enum UserType {
  ADMIN
  SUPERADMIN
}

enum PurchaseStatus {
  PENDING
  COMPLETED
  CANCELLED
  OUTSTANDING
}

enum SalesStatus {
  PENDING
  COMPLETED
  CANCELLED
  OUTSTANDING
}

enum ExpensesType {
  TRANSPORTATION
  ERP
  GSTSINGAPORE
  MAINTENANCE
  PETROL
  SALARY
  CARRENTAL
  FOOD
  OTHERS
}
